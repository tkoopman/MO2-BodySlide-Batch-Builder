# Form implementation generated from reading ui file 'UI\EditBuild.ui'
#
# Created by: PyQt6 UI code generator 6.8.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_EditBuild(object):
    def setupUi(self, EditBuild):
        EditBuild.setObjectName("EditBuild")
        EditBuild.resize(865, 507)
        EditBuild.setModal(True)
        self.verticalLayout = QtWidgets.QVBoxLayout(EditBuild)
        self.verticalLayout.setObjectName("verticalLayout")
        self.buildSettingsWidget = QtWidgets.QWidget(parent=EditBuild)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.buildSettingsWidget.sizePolicy().hasHeightForWidth())
        self.buildSettingsWidget.setSizePolicy(sizePolicy)
        self.buildSettingsWidget.setObjectName("buildSettingsWidget")
        self.buildSettingsLayout = QtWidgets.QFormLayout(self.buildSettingsWidget)
        self.buildSettingsLayout.setFieldGrowthPolicy(QtWidgets.QFormLayout.FieldGrowthPolicy.AllNonFixedFieldsGrow)
        self.buildSettingsLayout.setObjectName("buildSettingsLayout")
        self.enabledLabel = QtWidgets.QLabel(parent=self.buildSettingsWidget)
        self.enabledLabel.setStyleSheet("font-weight: bold;")
        self.enabledLabel.setObjectName("enabledLabel")
        self.buildSettingsLayout.setWidget(0, QtWidgets.QFormLayout.ItemRole.LabelRole, self.enabledLabel)
        self.enabledCheckBox = QtWidgets.QCheckBox(parent=self.buildSettingsWidget)
        self.enabledCheckBox.setObjectName("enabledCheckBox")
        self.buildSettingsLayout.setWidget(0, QtWidgets.QFormLayout.ItemRole.FieldRole, self.enabledCheckBox)
        self.outputModLabel = QtWidgets.QLabel(parent=self.buildSettingsWidget)
        self.outputModLabel.setStyleSheet("font-weight: bold;")
        self.outputModLabel.setObjectName("outputModLabel")
        self.buildSettingsLayout.setWidget(1, QtWidgets.QFormLayout.ItemRole.LabelRole, self.outputModLabel)
        self.outputModComboBox = QtWidgets.QComboBox(parent=self.buildSettingsWidget)
        self.outputModComboBox.setObjectName("outputModComboBox")
        self.buildSettingsLayout.setWidget(1, QtWidgets.QFormLayout.ItemRole.FieldRole, self.outputModComboBox)
        self.presetLabel = QtWidgets.QLabel(parent=self.buildSettingsWidget)
        self.presetLabel.setStyleSheet("font-weight: bold;")
        self.presetLabel.setObjectName("presetLabel")
        self.buildSettingsLayout.setWidget(2, QtWidgets.QFormLayout.ItemRole.LabelRole, self.presetLabel)
        self.presetComboBox = QtWidgets.QComboBox(parent=self.buildSettingsWidget)
        self.presetComboBox.setObjectName("presetComboBox")
        self.buildSettingsLayout.setWidget(2, QtWidgets.QFormLayout.ItemRole.FieldRole, self.presetComboBox)
        self.verticalLayout.addWidget(self.buildSettingsWidget)
        self.includeHeadingLabel = QtWidgets.QLabel(parent=EditBuild)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.includeHeadingLabel.sizePolicy().hasHeightForWidth())
        self.includeHeadingLabel.setSizePolicy(sizePolicy)
        self.includeHeadingLabel.setStyleSheet("font-weight: bold;")
        self.includeHeadingLabel.setObjectName("includeHeadingLabel")
        self.verticalLayout.addWidget(self.includeHeadingLabel)
        self.splitter = QtWidgets.QSplitter(parent=EditBuild)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.splitter.sizePolicy().hasHeightForWidth())
        self.splitter.setSizePolicy(sizePolicy)
        self.splitter.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.splitter.setMidLineWidth(0)
        self.splitter.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.splitter.setOpaqueResize(True)
        self.splitter.setChildrenCollapsible(False)
        self.splitter.setObjectName("splitter")
        self.includeTree = QtWidgets.QTreeWidget(parent=self.splitter)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.includeTree.sizePolicy().hasHeightForWidth())
        self.includeTree.setSizePolicy(sizePolicy)
        self.includeTree.setMinimumSize(QtCore.QSize(300, 200))
        self.includeTree.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.ExtendedSelection)
        self.includeTree.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectionBehavior.SelectRows)
        self.includeTree.setIndentation(5)
        self.includeTree.setHeaderHidden(True)
        self.includeTree.setObjectName("includeTree")
        self.includeTree.headerItem().setTextAlignment(0, QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.includeTree.header().setVisible(False)
        self.layoutWidget = QtWidgets.QWidget(parent=self.splitter)
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayout_2.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetDefaultConstraint)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(10)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.centerButtonsWidget = QtWidgets.QWidget(parent=self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centerButtonsWidget.sizePolicy().hasHeightForWidth())
        self.centerButtonsWidget.setSizePolicy(sizePolicy)
        self.centerButtonsWidget.setObjectName("centerButtonsWidget")
        self.centerButtonsLayout = QtWidgets.QVBoxLayout(self.centerButtonsWidget)
        self.centerButtonsLayout.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetFixedSize)
        self.centerButtonsLayout.setObjectName("centerButtonsLayout")
        self.upButton = QtWidgets.QPushButton(parent=self.centerButtonsWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.upButton.sizePolicy().hasHeightForWidth())
        self.upButton.setSizePolicy(sizePolicy)
        self.upButton.setAutoDefault(False)
        self.upButton.setObjectName("upButton")
        self.centerButtonsLayout.addWidget(self.upButton)
        self.addButton = QtWidgets.QPushButton(parent=self.centerButtonsWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.addButton.sizePolicy().hasHeightForWidth())
        self.addButton.setSizePolicy(sizePolicy)
        self.addButton.setAutoDefault(False)
        self.addButton.setObjectName("addButton")
        self.centerButtonsLayout.addWidget(self.addButton)
        self.removeButton = QtWidgets.QPushButton(parent=self.centerButtonsWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.removeButton.sizePolicy().hasHeightForWidth())
        self.removeButton.setSizePolicy(sizePolicy)
        self.removeButton.setAutoDefault(False)
        self.removeButton.setObjectName("removeButton")
        self.centerButtonsLayout.addWidget(self.removeButton)
        self.downButton = QtWidgets.QPushButton(parent=self.centerButtonsWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.downButton.sizePolicy().hasHeightForWidth())
        self.downButton.setSizePolicy(sizePolicy)
        self.downButton.setAutoDefault(False)
        self.downButton.setObjectName("downButton")
        self.centerButtonsLayout.addWidget(self.downButton)
        self.horizontalLayout_2.addWidget(self.centerButtonsWidget)
        self.tabWidget = QtWidgets.QTabWidget(parent=self.layoutWidget)
        self.tabWidget.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        self.tabWidget.setObjectName("tabWidget")
        self.groupsTab = QtWidgets.QWidget()
        self.groupsTab.setObjectName("groupsTab")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.groupsTab)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.groupFilter = QtWidgets.QLineEdit(parent=self.groupsTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupFilter.sizePolicy().hasHeightForWidth())
        self.groupFilter.setSizePolicy(sizePolicy)
        self.groupFilter.setInputMethodHints(QtCore.Qt.InputMethodHint.ImhNone)
        self.groupFilter.setClearButtonEnabled(True)
        self.groupFilter.setObjectName("groupFilter")
        self.verticalLayout_3.addWidget(self.groupFilter)
        self.groupList = QtWidgets.QListWidget(parent=self.groupsTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupList.sizePolicy().hasHeightForWidth())
        self.groupList.setSizePolicy(sizePolicy)
        self.groupList.setEditTriggers(QtWidgets.QAbstractItemView.EditTrigger.NoEditTriggers)
        self.groupList.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.ExtendedSelection)
        self.groupList.setHorizontalScrollMode(QtWidgets.QAbstractItemView.ScrollMode.ScrollPerPixel)
        self.groupList.setObjectName("groupList")
        self.verticalLayout_3.addWidget(self.groupList)
        self.tabWidget.addTab(self.groupsTab, "")
        self.slidersetTab = QtWidgets.QWidget()
        self.slidersetTab.setObjectName("slidersetTab")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.slidersetTab)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.sliderSetFilter = QtWidgets.QLineEdit(parent=self.slidersetTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sliderSetFilter.sizePolicy().hasHeightForWidth())
        self.sliderSetFilter.setSizePolicy(sizePolicy)
        self.sliderSetFilter.setObjectName("sliderSetFilter")
        self.verticalLayout_4.addWidget(self.sliderSetFilter)
        self.sliderSetList = QtWidgets.QListWidget(parent=self.slidersetTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sliderSetList.sizePolicy().hasHeightForWidth())
        self.sliderSetList.setSizePolicy(sizePolicy)
        self.sliderSetList.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        self.sliderSetList.setEditTriggers(QtWidgets.QAbstractItemView.EditTrigger.NoEditTriggers)
        self.sliderSetList.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.ExtendedSelection)
        self.sliderSetList.setHorizontalScrollMode(QtWidgets.QAbstractItemView.ScrollMode.ScrollPerPixel)
        self.sliderSetList.setWordWrap(False)
        self.sliderSetList.setSelectionRectVisible(False)
        self.sliderSetList.setObjectName("sliderSetList")
        self.verticalLayout_4.addWidget(self.sliderSetList)
        self.autoFilterCheckBox = QtWidgets.QCheckBox(parent=self.slidersetTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.autoFilterCheckBox.sizePolicy().hasHeightForWidth())
        self.autoFilterCheckBox.setSizePolicy(sizePolicy)
        self.autoFilterCheckBox.setChecked(True)
        self.autoFilterCheckBox.setObjectName("autoFilterCheckBox")
        self.verticalLayout_4.addWidget(self.autoFilterCheckBox)
        self.tabWidget.addTab(self.slidersetTab, "")
        self.advancedTab = QtWidgets.QWidget()
        self.advancedTab.setObjectName("advancedTab")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.advancedTab)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.widget = QtWidgets.QWidget(parent=self.advancedTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget.sizePolicy().hasHeightForWidth())
        self.widget.setSizePolicy(sizePolicy)
        self.widget.setObjectName("widget")
        self.advancedFormLayout = QtWidgets.QFormLayout(self.widget)
        self.advancedFormLayout.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetDefaultConstraint)
        self.advancedFormLayout.setLabelAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.advancedFormLayout.setObjectName("advancedFormLayout")
        self.typeLabel = QtWidgets.QLabel(parent=self.widget)
        self.typeLabel.setStyleSheet("font-weight: bold;")
        self.typeLabel.setObjectName("typeLabel")
        self.advancedFormLayout.setWidget(0, QtWidgets.QFormLayout.ItemRole.LabelRole, self.typeLabel)
        self.typeComboBox = QtWidgets.QComboBox(parent=self.widget)
        self.typeComboBox.setObjectName("typeComboBox")
        self.typeComboBox.addItem("")
        self.typeComboBox.addItem("")
        self.typeComboBox.addItem("")
        self.typeComboBox.addItem("")
        self.typeComboBox.addItem("")
        self.advancedFormLayout.setWidget(0, QtWidgets.QFormLayout.ItemRole.FieldRole, self.typeComboBox)
        self.valueLabel = QtWidgets.QLabel(parent=self.widget)
        self.valueLabel.setMinimumSize(QtCore.QSize(50, 0))
        self.valueLabel.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.valueLabel.setStyleSheet("font-weight: bold;")
        self.valueLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.valueLabel.setObjectName("valueLabel")
        self.advancedFormLayout.setWidget(1, QtWidgets.QFormLayout.ItemRole.LabelRole, self.valueLabel)
        self.valueLineEdit = QtWidgets.QLineEdit(parent=self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.valueLineEdit.sizePolicy().hasHeightForWidth())
        self.valueLineEdit.setSizePolicy(sizePolicy)
        self.valueLineEdit.setFrame(True)
        self.valueLineEdit.setObjectName("valueLineEdit")
        self.advancedFormLayout.setWidget(1, QtWidgets.QFormLayout.ItemRole.FieldRole, self.valueLineEdit)
        self.useLabel = QtWidgets.QLabel(parent=self.widget)
        self.useLabel.setStyleSheet("font-weight: bold;")
        self.useLabel.setObjectName("useLabel")
        self.advancedFormLayout.setWidget(2, QtWidgets.QFormLayout.ItemRole.LabelRole, self.useLabel)
        self.useComboBox = QtWidgets.QComboBox(parent=self.widget)
        self.useComboBox.setToolTip("")
        self.useComboBox.setObjectName("useComboBox")
        self.useComboBox.addItem("")
        self.useComboBox.addItem("")
        self.useComboBox.addItem("")
        self.useComboBox.addItem("")
        self.useComboBox.addItem("")
        self.advancedFormLayout.setWidget(2, QtWidgets.QFormLayout.ItemRole.FieldRole, self.useComboBox)
        self.verticalLayout_5.addWidget(self.widget)
        self.advancedButtonsWidget = QtWidgets.QWidget(parent=self.advancedTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.advancedButtonsWidget.sizePolicy().hasHeightForWidth())
        self.advancedButtonsWidget.setSizePolicy(sizePolicy)
        self.advancedButtonsWidget.setObjectName("advancedButtonsWidget")
        self.advancedButtonsLayout = QtWidgets.QHBoxLayout(self.advancedButtonsWidget)
        self.advancedButtonsLayout.setObjectName("advancedButtonsLayout")
        spacerItem = QtWidgets.QSpacerItem(0, 0, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.advancedButtonsLayout.addItem(spacerItem)
        self.newButton = QtWidgets.QPushButton(parent=self.advancedButtonsWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.newButton.sizePolicy().hasHeightForWidth())
        self.newButton.setSizePolicy(sizePolicy)
        self.newButton.setObjectName("newButton")
        self.advancedButtonsLayout.addWidget(self.newButton)
        self.applyAdvancedButton = QtWidgets.QPushButton(parent=self.advancedButtonsWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.applyAdvancedButton.sizePolicy().hasHeightForWidth())
        self.applyAdvancedButton.setSizePolicy(sizePolicy)
        self.applyAdvancedButton.setObjectName("applyAdvancedButton")
        self.advancedButtonsLayout.addWidget(self.applyAdvancedButton)
        self.verticalLayout_5.addWidget(self.advancedButtonsWidget)
        self.previewGroupBox = QtWidgets.QGroupBox(parent=self.advancedTab)
        self.previewGroupBox.setObjectName("previewGroupBox")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.previewGroupBox)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.previewList = QtWidgets.QListWidget(parent=self.previewGroupBox)
        self.previewList.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.previewList.setEditTriggers(QtWidgets.QAbstractItemView.EditTrigger.NoEditTriggers)
        self.previewList.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.NoSelection)
        self.previewList.setObjectName("previewList")
        self.verticalLayout_6.addWidget(self.previewList)
        self.verticalLayout_5.addWidget(self.previewGroupBox)
        self.tabWidget.addTab(self.advancedTab, "")
        self.horizontalLayout_2.addWidget(self.tabWidget)
        self.verticalLayout.addWidget(self.splitter)
        self.dialogButtonsWidget = QtWidgets.QWidget(parent=EditBuild)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.dialogButtonsWidget.sizePolicy().hasHeightForWidth())
        self.dialogButtonsWidget.setSizePolicy(sizePolicy)
        self.dialogButtonsWidget.setObjectName("dialogButtonsWidget")
        self.dialogButtonsLayout = QtWidgets.QHBoxLayout(self.dialogButtonsWidget)
        self.dialogButtonsLayout.setObjectName("dialogButtonsLayout")
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.dialogButtonsLayout.addItem(spacerItem1)
        self.validateButton = QtWidgets.QPushButton(parent=self.dialogButtonsWidget)
        self.validateButton.setAutoDefault(False)
        self.validateButton.setObjectName("validateButton")
        self.dialogButtonsLayout.addWidget(self.validateButton)
        self.okButton = QtWidgets.QPushButton(parent=self.dialogButtonsWidget)
        self.okButton.setAutoDefault(False)
        self.okButton.setObjectName("okButton")
        self.dialogButtonsLayout.addWidget(self.okButton)
        self.cancelButton = QtWidgets.QPushButton(parent=self.dialogButtonsWidget)
        self.cancelButton.setAutoDefault(False)
        self.cancelButton.setObjectName("cancelButton")
        self.dialogButtonsLayout.addWidget(self.cancelButton)
        self.verticalLayout.addWidget(self.dialogButtonsWidget)

        self.retranslateUi(EditBuild)
        self.tabWidget.setCurrentIndex(0)
        self.cancelButton.clicked.connect(EditBuild.reject) # type: ignore
        self.okButton.clicked.connect(EditBuild.accept) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(EditBuild)
        EditBuild.setTabOrder(self.enabledCheckBox, self.outputModComboBox)
        EditBuild.setTabOrder(self.outputModComboBox, self.presetComboBox)
        EditBuild.setTabOrder(self.presetComboBox, self.includeTree)
        EditBuild.setTabOrder(self.includeTree, self.upButton)
        EditBuild.setTabOrder(self.upButton, self.addButton)
        EditBuild.setTabOrder(self.addButton, self.removeButton)
        EditBuild.setTabOrder(self.removeButton, self.downButton)
        EditBuild.setTabOrder(self.downButton, self.tabWidget)
        EditBuild.setTabOrder(self.tabWidget, self.groupFilter)
        EditBuild.setTabOrder(self.groupFilter, self.groupList)
        EditBuild.setTabOrder(self.groupList, self.sliderSetFilter)
        EditBuild.setTabOrder(self.sliderSetFilter, self.sliderSetList)
        EditBuild.setTabOrder(self.sliderSetList, self.autoFilterCheckBox)
        EditBuild.setTabOrder(self.autoFilterCheckBox, self.typeComboBox)
        EditBuild.setTabOrder(self.typeComboBox, self.valueLineEdit)
        EditBuild.setTabOrder(self.valueLineEdit, self.useComboBox)
        EditBuild.setTabOrder(self.useComboBox, self.newButton)
        EditBuild.setTabOrder(self.newButton, self.applyAdvancedButton)
        EditBuild.setTabOrder(self.applyAdvancedButton, self.previewList)
        EditBuild.setTabOrder(self.previewList, self.validateButton)
        EditBuild.setTabOrder(self.validateButton, self.okButton)
        EditBuild.setTabOrder(self.okButton, self.cancelButton)

    def retranslateUi(self, EditBuild):
        _translate = QtCore.QCoreApplication.translate
        EditBuild.setWindowTitle(_translate("EditBuild", "BSBB - Edit Build"))
        self.enabledLabel.setText(_translate("EditBuild", "Enabled"))
        self.enabledCheckBox.setWhatsThis(_translate("EditBuild", "Can disable rules you want to temporarily not use"))
        self.outputModLabel.setText(_translate("EditBuild", "Output Mod"))
        self.outputModComboBox.setWhatsThis(_translate("EditBuild", "<html><head/><body><p>Output mod to place the built meshes into. This can be the same across multiple builds.</p><p>If &quot;Delete meshes pre-build&quot; setting enabled, the meshes folder will be emptied before builds start running.</p></body></html>"))
        self.presetLabel.setText(_translate("EditBuild", "Preset"))
        self.presetComboBox.setWhatsThis(_translate("EditBuild", "<html><head/><body><p>BodySlide Preset to use for this build.</p><p>NOTE: BSBB does not validate that you have selected a valid preset for the Outfits and Bodies you have included.</p></body></html>"))
        self.includeHeadingLabel.setText(_translate("EditBuild", "Include"))
        self.includeTree.setWhatsThis(_translate("EditBuild", "<html><head/><body><p>List of items to include / exclude from this build.</p><p>Outfits / Bodies that are:</p><p><span style=\" font-weight:600;\">Excluded</span>: Will never be included in build. Order of these does not matter.</p><p><span style=\" font-weight:600;\">Included</span>: Will be added to build, as long as not excluded, but can be filtered out by Keep / Remove. Order of these does not matter.</p><p>The following are processed in order top to bottom to filter alternatives out ideally down to a single entry per output mesh. Any that still have alternatives will show up when Validation runs checking for conflicts.</p><p><span style=\" font-weight:600;\">Keep</span>: When alternative meshes exist in the included build list, keep will remove any that don\'t match, unless doing so will remove all.</p><p><span style=\" font-weight:600;\">Remove</span>: When alternative meshes exist in the included build list, remove will remove any that match, unless doing so will remove all.</p></body></html>"))
        self.includeTree.headerItem().setText(0, _translate("EditBuild", "Icon"))
        self.includeTree.headerItem().setText(1, _translate("EditBuild", "Name"))
        self.includeTree.headerItem().setText(2, _translate("EditBuild", "Type"))
        self.includeTree.headerItem().setText(3, _translate("EditBuild", "Uses"))
        self.upButton.setWhatsThis(_translate("EditBuild", "<html><head/><body><p>Move selected items in include list up/down.</p><p>NOTE: Only items under &quot;Ordered by Priority&quot; can be moved as other sections order doesn\'t matter so will just be displayed alphabetically</p></body></html>"))
        self.upButton.setText(_translate("EditBuild", "Up"))
        self.addButton.setWhatsThis(_translate("EditBuild", "<html><head/><body><p>Adds selected Groups or Outfits/Bodies to list as Include + Keep matching alternatives.</p><p>You can change this after adding via the Advanced tab</p></body></html>"))
        self.addButton.setText(_translate("EditBuild", "<<"))
        self.removeButton.setWhatsThis(_translate("EditBuild", "Remove currently selected entries."))
        self.removeButton.setText(_translate("EditBuild", ">>"))
        self.downButton.setWhatsThis(_translate("EditBuild", "<html><head/><body><p>Move selected items in include list up/down.</p><p>NOTE: Only items under &quot;Ordered by Priority&quot; can be moved as other sections order doesn\'t matter so will just be displayed alphabetically</p></body></html>"))
        self.downButton.setText(_translate("EditBuild", "Down"))
        self.groupFilter.setPlaceholderText(_translate("EditBuild", "Filter"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.groupsTab), _translate("EditBuild", "Groups"))
        self.sliderSetFilter.setPlaceholderText(_translate("EditBuild", "Filter"))
        self.autoFilterCheckBox.setWhatsThis(_translate("EditBuild", "<html><head/><body><p>Filter\'s out any Outfits / Bodies that already exist in groups assigned in include list.</p><p>Note: Filters out even if group assigned as Exclude.</p></body></html>"))
        self.autoFilterCheckBox.setText(_translate("EditBuild", "Auto filter out Outfits and Bodies that already included via Groups"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.slidersetTab), _translate("EditBuild", "Outfit/Body"))
        self.typeLabel.setText(_translate("EditBuild", "Type"))
        self.typeComboBox.setWhatsThis(_translate("EditBuild", "<html><head/><body><p>Defines what the following field is referencing.</p></body></html>"))
        self.typeComboBox.setItemText(0, _translate("EditBuild", "Group"))
        self.typeComboBox.setItemText(1, _translate("EditBuild", "Source"))
        self.typeComboBox.setItemText(2, _translate("EditBuild", "Outfit / Body"))
        self.typeComboBox.setItemText(3, _translate("EditBuild", "Outfit / Body Contains"))
        self.typeComboBox.setItemText(4, _translate("EditBuild", "Outfit / Body Regex"))
        self.valueLabel.setText(_translate("EditBuild", "Value"))
        self.valueLineEdit.setWhatsThis(_translate("EditBuild", "<html><head/><body><p>Depending on Type the value should be:</p><p><span style=\" font-weight:600;\">Group</span>: Exact name of group to match. Case insensitive.</p><p><span style=\" font-weight:600;\">Source</span>: File name excluding path, of the file that either added the Outfit / Body (.osp) or that included it in group assignments (.xml). Doesn\'t filter based on what group it was assigned to in the XML just that it was assigned to a group in that XML.</p><p><span style=\" font-weight:600;\">Outfit / Body</span>: Exact name of an Outfit / Body. Case insensitive.</p><p><span style=\" font-weight:600;\">Outfit / Body Contains</span>: Adds any outfit that contains the entered text anywhere in it\'s name. Case insensitive.</p><p><span style=\" font-weight:600;\">Outfit / Body Regex</span>: Enter a regular expression that will be matched against Outfit / Body names. Case insensitive.<br/></p></body></html>"))
        self.useLabel.setText(_translate("EditBuild", "Use"))
        self.useComboBox.setWhatsThis(_translate("EditBuild", "<html><head/><body><p><span style=\" font-weight:600;\">Exclude</span>: Will exclude out-right any matching<br/><span style=\" font-weight:600;\">Include</span>: Will add all matching to build.</p><p>Filtering then happens on any meshes that have included multiple alternatives.<br/>Filtering happens in order top to bottom until either only 1 alternatives left or no more entries.<br/>Filtering will NEVER remove all alternatives.</p><p><span style=\" font-weight:600;\">Keep</span>: As long as at least 1 alternitive matches will remove unmatching.<br/><span style=\" font-weight:600;\">Remove</span>: As long as 1 alternative doesn\'t match will remove matching.</p></body></html>"))
        self.useComboBox.setItemText(0, _translate("EditBuild", "Include + Keep matching alternatives"))
        self.useComboBox.setItemText(1, _translate("EditBuild", "Keep matching alternatives"))
        self.useComboBox.setItemText(2, _translate("EditBuild", "Remove matching alternatives"))
        self.useComboBox.setItemText(3, _translate("EditBuild", "Include Only"))
        self.useComboBox.setItemText(4, _translate("EditBuild", "Exclude"))
        self.newButton.setWhatsThis(_translate("EditBuild", "Add above as new entry"))
        self.newButton.setText(_translate("EditBuild", "New"))
        self.applyAdvancedButton.setWhatsThis(_translate("EditBuild", "Update currently selected entry with above."))
        self.applyAdvancedButton.setText(_translate("EditBuild", "Apply"))
        self.previewGroupBox.setTitle(_translate("EditBuild", "Preview of Matching"))
        self.previewList.setWhatsThis(_translate("EditBuild", "Displays Outfits / Bodies that match the above details."))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.advancedTab), _translate("EditBuild", "Advanced"))
        self.validateButton.setWhatsThis(_translate("EditBuild", "<html><head/><body><p>Validates this build.</p><p>Note: Validatation includes any unsaved changes to build.</p></body></html>"))
        self.validateButton.setText(_translate("EditBuild", "Validate"))
        self.okButton.setWhatsThis(_translate("EditBuild", "Save build and close"))
        self.okButton.setText(_translate("EditBuild", "OK"))
        self.cancelButton.setWhatsThis(_translate("EditBuild", "Close without saving"))
        self.cancelButton.setText(_translate("EditBuild", "Cancel"))
